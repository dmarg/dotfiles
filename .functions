# function admin() {
# 	curl 'https://mybusiness.mosyle.com/Controller/selfservice.php' \
# 	-X POST \
# 	-H 'Host: mybusiness.mosyle.com' \
# 	-H 'Accept: application/json, text/javascript, */*; q=0.01' \
# 	-H 'X-Requested-With: XMLHttpRequest' \
# 	-H 'Accept-Language: en-US,en;q=0.9' \
# 	-H 'Origin: https://mybusiness.mosyle.com' \
# 	-H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko)' \
# 	-H 'Connection: keep-alive' \
# 	-H 'Referer: https://mybusiness.mosyle.com/?account=indigov&application=1' \
# 	-H 'Content-Length: 213' \
# 	-H 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \
# 	--cookie 'PHPSESSID=e87e868d3330d0e7327ac16d455f85f3' \
# 	--data-raw 'usertab_current_os=ios&usertab_current_idcompany=indigov&operation=validate_ondemand_request&UDID=UUID_HERE&deviceudid=151B57DA-98AC-5A99-B112-C07AB7262D94&ProfileID=10&idcompany=indigov'
# }

# Caffeinate command for macOS to prevent the system from sleeping for a specified number of hours
caffeinate_for() {
  if [ -z "$1" ]; then
    echo "Please specify the number of hours."
  else
    local hours=$1
    local seconds=$((hours * 3600))
    local end_time=$(date -v+${hours}H +"%Y-%m-%d %I:%M %p") 
    caffeinate -i -t $seconds &
    echo "Caffeinating for $hours hours. Caffeinate will end at $end_time."
  fi
}

# Caffeinate command for macOS to prevent the system from sleeping until 6:00 PM
caffeinate_until_6pm() {
  local current_time=$(date +%s)
  local end_time=$(date -v18H -v0M -v0S +%s)

  if [ $current_time -gt $end_time ]; then
    end_time=$(date -v+1d -v18H -v0M -v0S +%s)
  fi

  local seconds=$((end_time - current_time))
  caffeinate -i -t $seconds &
  echo "Caffeinating... Caffeinate will end at $(date -r $end_time +"%Y-%m-%d %I:%M:%S %p")."
}


# Simple calculator
function calc() {
	local result=""
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//'   # remove trailing zeros
	else
		printf "$result"
	fi
	printf "\n"
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}


# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo # newline
	fi
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo # newline
	fi
}

# `m` with no arguments opens the current directory in TextMate, otherwise
# opens the given location
function m() {
	if [ $# -eq 0 ]; then
		mate .
	else
		mate "$@"
	fi
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .
	else
		subl "$@"
	fi
}

# `s` with no arguments opens the current directory in VS Code, otherwise
# opens the given location
function vsc() {
	if [ $# -eq 0 ]; then
		code .
	else
		code "$@"
	fi
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .
	else
		vim "$@"
	fi
}

# `o` with no arguments opens current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}
